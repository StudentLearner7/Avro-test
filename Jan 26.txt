import org.springframework.data.opensearch.core.OpenSearchRestTemplate;
import org.springframework.data.opensearch.core.query.NativeSearchQueryBuilder;
import org.springframework.data.opensearch.core.query.Query;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.util.stream.Collectors;

public class CustomRepositoryImpl implements CustomRepository {

    private final OpenSearchRestTemplate template;

    @Autowired
    public CustomRepositoryImpl(OpenSearchRestTemplate template) {
        this.template = template;
    }

    public List<Integer> executeCustomQuery() {
        String jsonString = "{ \"size\": 0, \"query\": { \"bool\": { \"must\": [ { \"wildcard\": {\"value.bpmnProcessId\": \"Demo*\"}}, {\"match\" : {\"value.bpmnElementType\" : \"PROCESS\"}} ] } }, \"aggs\": { \"keys\": { \"terms\": { \"field\": \"key\", \"size\": 10000 }, \"aggs\": { \"the_filter\": { \"bucket_selector\": { \"buckets_path\": { \"the_count\": \"_count\" }, \"script\": \"params.the_count == 2\" } } } } } }";
        Query query = new NativeSearchQueryBuilder()
                .withQuery(QueryBuilders.wrapperQuery(jsonString))
                .build();
        
        SearchHits<MyEntity> hits = template.search(query, MyEntity.class);
        // Process the response to extract keys (this part depends on your actual response structure)
        // Assuming you have a method to extract and convert bucket keys to your desired format
        
        return hits.getSearchHits().stream()
                .map(hit -> hit.getContent().getKey()) // Adjust this mapping based on your actual method to extract keys
                .collect(Collectors.toList());
    }
}
