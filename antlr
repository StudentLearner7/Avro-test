grammar JDL;

@header {
  package com.abc;
}

// Parse rules
jdlFile : (entityDeclaration | relationshipDeclaration)*;

entityDeclaration : 'entity' entityName '{' fieldDeclaration* '}';
fieldDeclaration : fieldName fieldType fieldValidation*;
fieldValidation :
    'required' |
    'minlength(' DECIMAL_LITERAL ')' |
    'maxlength(' DECIMAL_LITERAL ')' |
    'pattern(' STRING_LITERAL ')' |
    'unique';

relationshipDeclaration : 'relationship' relationshipType '{' relationshipBody '}';

relationshipType : 'OneToOne' | 'OneToMany' | 'ManyToOne' | 'ManyToMany';
relationshipBody : sourceEntity relationshipField? 'to' targetEntity relationshipField?;

relationshipField : '{' fieldName ('(' IDENTIFIER ')')? '}';

entityName : IDENTIFIER;
fieldName : IDENTIFIER;
fieldType : IDENTIFIER;
targetEntity : IDENTIFIER;
sourceEntity : IDENTIFIER;

// Lexer rules
IDENTIFIER : [a-zA-Z_][a-zA-Z0-9_]*;
DECIMAL_LITERAL : [0-9]+;
STRING_LITERAL : '"' ('\\"'|.)*? '"';  // Match a string within double quotes
WS : [ \t\r\n]+ -> skip;
