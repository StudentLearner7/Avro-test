@Override
public void enterFieldDeclaration(JDLParser.FieldDeclarationContext ctx) {
    FieldInfo fieldInfo = new FieldInfo();
    fieldInfo.name = ctx.fieldName().getText();
    fieldInfo.type = ctx.fieldType().getText();

    for (JDLParser.FieldValidationContext validationCtx : ctx.fieldValidation()) {
        String validationType = validationCtx.getStart().getText();
        Object validationValue = null;
        if (validationType.equals("minlength") || validationType.equals("maxlength")) {
            validationValue = Integer.parseInt(validationCtx.DECIMAL_LITERAL().getText());
        } else if (validationType.equals("pattern")) {
            validationValue = validationCtx.STRING_LITERAL().getText();
        } else if (validationType.equals("unique")) {
            validationValue = true;  // 'unique' is a boolean flag
        }
        fieldInfo.validations.put(validationType, validationValue);
    }



@Entity
public class ${entity.name} {
    <#list entity.fields as field>
        <#if field.type == "String">
            <#-- String-specific validations -->
            <#if field.validations.containsKey("minlength")>
            @Size(min = ${field.validations["minlength"]})
            </#if>
            <#if field.validations.containsKey("maxlength")>
            @Size(max = ${field.validations["maxlength"]})
            </#if>
            <#if field.validations.containsKey("pattern")>
            @Pattern(regexp = ${field.validations["pattern"]})
            </#if>
        </#if>
        <#if field.validations.containsKey("unique")>
        @Column(unique = true)
        </#if>
        private ${field.type} ${field.name};
    </#list>

    // ... other entity code ...
}
